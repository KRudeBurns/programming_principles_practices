1. Cout << "Success!\n";

correction:
   cout << "Success!\n";

2. cout << "Success!\n;

correction:
   cout << "Success!\n";

3. cout << "Success" << !\n"

correction:
   cout << "Success" << "!\n" 

4. cout << success << '\n';

correction:
   cout << "success" << '\n';

5. string res = 7; vector<int> v(10); v[5] = res; cout << "Success!\n";

correction:
  //vector v can only hold ints, so v can be a vector for strings.
  string res = 7;
  vector<string> v(10);
  v[5] = res;
  cout << "Success!\n";

6. vector<int> v(10); v(5) = 7; if (v(5)!=7) cout << "Success!\n";

correction:
   //subscript notation is [] not ()
   vector<int> v(10);
   v[5] = 7; 
   if (v[5]!=7) 
       cout << "Success!\n";


7. if (cond) cout << "Success!\n"; else cout << "Fail!\n";

correction:
   //no error found
   


8. bool c = false; if (c) cout << "Success!\n"; else cout << "Fail!\n";

correction:
// if c is false - success; otherwise failure. 
// a better logic is success if c is true.
//other than that, there is no error so far.

   bool c = true; 
   if (c)
      cout << "Success!\n"; 
   else
      cout << "Fail!\n";




9. string s = "ape"; boo c = "fool"<s; if (c) cout << "Success!\n";

correction:
 // c is not a variable, boo is not a type

 string s = "ape";
 bool c = "fool"<s; 
 
 if (c) 
    cout << "Success!\n";



10. string s = "ape"; if (s=="fool") cout << "Success!\n";

correction:
// the only way this will be logical is if the user is allowed
//to change the value of s using input.

string s = "ape"; 
cin >> s;
if (s=="fool") 
    cout << "Success!\n";


11. string s = "ape"; if (s=="fool") cout < "Success!\n";

correction:
   syntax error at end of fragment

   string s = "ape"; 
   if (s=="fool") 
    cout << "Success!\n";


12. string s = "ape"; if (s+"fool") cout < "Success!\n";

correction:
   syntax error at end of fragment

   string s = "ape"; 
   if (s+"fool") 
    cout << "Success!\n";




13. vector<char> v(5); for (int i=0; 0<v.size(); ++i) ; cout << "Success!\n";

correction:
    - error in condition 0 < v.size() is wrong.
    - error in using semicolon at end of loop conditional


    vector<char> v(5); 
    for (int i=0; i<v.size(); ++i)
         cout << "Success!\n";




14. vector<char> v(5); for (int i=0; i<=v.size(); ++i) ; cout << "Success!\n";

correction:

// out of range error i <= v.size()

vector<char> v(5);
for (int i=0; i<=v.size() - 1; ++i) 
    cout << "Success!\n";


15. string s = "Success!\n"; for (int i=0; i<6; ++i) cout << s[i];

correction:
   the intent is to print the whole of s. s is of size 7 not 6.

   string s = "Success!\n"; 
   for (int i=0; i<7; ++i) 
       cout << s[i];



16. if (true) then cout << "Success!\n"; else cout << "Fail!\n";

correction:

if (true)
    cout << "Success!\n";
else
    cout << "Fail!\n";


17. int x = 2000; char c = x; if (c==2000) cout << "Success!\n";

correction:
//if we cast x and assign it to c, and it throws no error,
//then we can print out success!

int x = 2000;
char c = narrow_cast<char>(x);
if (c == x)
    cout << "Success!\n";


18. string s = "Success!\n"; for (int i=0; i<10; ++i) cout << s[i];

correction:

No errors found in this program. But a better program will use the size function

string s = "Success!\n"; 
for (int i = 0; i < s.size(); ++i)
    cout << s[i];



19. vector v(5); for (int i=0; i<=v.size(); ++i) ; cout << "Success!\n";

correction:
the loop does nothing. fix this.
the loop will have an out of range error. fix it.

vector v(5);
for(int i = 0; i < v.size(); ++i)
    cout << "Success!\n";

20. int i=0; int j = 9; while (i<10) ++j; if (j<i) cout << "Success!\n";

correction:
the loop does only an increment of j. fix it.
also the loop does not change the value of i, so the increment 
should be applied to i.

int i = 0;
int j = 9;

while(i < 10)
{    
    if (j < i)
       cout << "Success!\n";
    ++i;
}


21. int x = 2; double d = 5/(x–2); if (d==2*x+0.5) cout << "Success!\n";

correction:

we cannot have d be an undefined number which will happen when x = 2
so I use an if statement to correct the error.

int x = 2;
if (x == 2)
{
    cout << "x's value is not good for the work!\n";
    return -1; //throw an error
}
double d = 5 / (x - 2);
if (d == 2 * x + 0.5)
    cout << "Success!\n";

22. string<char> s = "Success!\n"; for (int i=0; i<=10; ++i) cout << s[i];

correction:

string<char> s = "Success!\n"; 
for (int i=0; i< s.size(); ++i)
     cout << s[i];


23. int i=0; while (i<10) ++j; if (j<i) cout << "Success!\n";

correction:
j was neither declared nor assigned a value.

int i=0; 
int j;
cout << "Enter a value for j: \n";
cin >> j;
while (i<10)
{       
    if (j<i) 
       cout << "Success!\n";

    ++i;
}



24. int x = 4; double d = 5/(x–2); if (d=2*x+0.5) cout << "Success!\n";

correction:
the conditional uses and assignment statement

int x = 4; 
double d = 5/(x–2); 
if (d == 2*x+0.5)
    cout << "Success!\n";


25. cin << "Success!\n";

correction:

cout << "Success!\n";